.\" Generated by scdoc 1.11.2
.\" Complete documentation for this program is not available as a GNU info page
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.nh
.ad l
.\" Begin generated content:
.TH "tkey-sign" "1" "2023-11-16"
.P
.SH NAME
.P
tkey-sign - Create or verify digital signatures with the Tillitis TKey
.P
.SH SYNOPSIS
.P
\fBtkey-sign\fR -h/--help
.P
\fBtkey-sign\fR -G/--getkey -p/--public pubkey [-d/--port device] [-f/--force] [-s/--speed speed] [--uss] [--uss-file ussfile] [--verbose]
.P
\fBtkey-sign\fR -S/--sign -m message -p/--public pubkey [-d/--port device] [-f/--force] [-s speed] [--uss] [--uss-file ussfile] [--verbose] [-x sigfile]
.P
\fBtkey-sign\fR -V/--verify -m message -p/--public pubkey [--verbose] [-x sigfile]
.P
\fBtkey-sign\fR --version
.P
.SH DESCRIPTION
.P
\fBtkey-sign\fR creates (-S) and verifies (-V) cryptographic signatures of
files.\& The signature is created by the \fBsigner\fR device app running on
the Tillitis TKey.\& The signer is automatically loaded into the TKey
when signing or extracting the public key.\&
.P
\fB-G, --getkey\fR
.P
.RS 4
Load device app (if not already loaded) and output its public key into
a file.\& Pass the filename to store the public key in with \fB-p pubkey\fR.\&
Combine with \fB--uss\fR or \fB--uss-file ussfile\fR to change the key pair.\&
.P
.RE
\fB-S, --sign\fR
.P
.RS 4
Load device app (if not already loaded) and sign the specified message
file (\fB-m message\fR).\& Store a signature in a file.\& Default signature
file is message file + ".\&sig", specify another filename with \fB-x
sigfile\fR.\& Also needs \fB-p pubkey\fR which is used for the comment in the
sigfile and to verify that you really have the same public key as the
loaded device app.\&
.P
Combine with \fB--uss\fR or \fB--uss-file ussfile\fR to change the key pair.\&
.P
.RE
\fB-V, --verify\fR
.P
.RS 4
Verify the signature of message.\& Does not need a connected TKey.\&
Needs \fB-m message\fR and \fB-p pubkey\fR.\& Default signature file is message.\&sig.\&
Specify with \fB-x sigfile\fR.\&
.P
.RE
\fB-d, --port device\fR
.P
.RS 4
Specify the device path for the TKey, typically something like
\fB/dev/ttyACM0\fR.\& By default the device is auto-detected.\&
.P
.RE
\fB-f, --force\fR
.P
.RS 4
Force writing signature and pubkey file, overwriting existing files.\&
.P
.RE
\fB-h, --help\fR
.P
.RS 4
Output short help text.\&
.P
.RE
\fB-m message\fR
.P
.RS 4
When signing, the file containing the message to sign.\&
When verifying, the file containing the message to verify.\&
.P
.RE
\fB-p, --public pubkey\fR
.P
.RS 4
Specify path to public key file.\&
.P
.RE
\fB-s, --speed speed\fR
.P
.RS 4
Specify the speed in bits/second for the TKey device.\& Default is
62500 b/s.\&
.P
.RE
\fB--uss\fR
.P
.RS 4
Interactively enter a User Supplied Secret to be used when loading
a device app to the TKey.\& This is used to create different key
pairs.\& A warning is printed if the app is already loaded and this
USS is not used.\&
.P
.RE
\fB--uss-file secret\fR
.P
.RS 4
Use a User Supplied Secret in a file to be used when loading a
device app to the TKey.\& This is used to create different key
pairs.\& A warning is printed if the app is already loaded and this
USS is not used.\& Use \fB-\fR to input from stdin.\&
.P
.RE
\fB--verbose\fR
.P
.RS 4
Be very verbose about what is happening, including hexdumps of
traffic to and from the TKey.\&
.P
.RE
\fB--version\fR
.P
.RS 4
Output version information and quit.\&
.P
.RE
\fB-x sigfile\fR
.P
.RS 4
The signature file to create or use with verification.\& The default
when not using \fB-x\fR is \fBmessage.\&sig\fR.\&
.P
.RE
.SH FORMATS
.P
Signature files are expected to contain a one-line comment beginning
with "untrusted comment: ", then encoded in BASE64:
.P
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.IP \(bu 4
.\}
2 byte algorithm identifier, so far only "Ed" for Ed25519.\&
.RE
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.IP \(bu 4
.\}
8 byte key number (unused by tkey-sign).\&
.RE
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.IP \(bu 4
.\}
64 byte Ed25519 signature.\&

.RE
.P
Pubkey files are expected to contain, a one-line comment beginning
with "untrusted comment: ", then encoded in BASE64:
.P
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.IP \(bu 4
.\}
2 byte algorithm identifier, so far only "Ed" for Ed25519.\&
.RE
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.IP \(bu 4
.\}
8 byte key number (unused by tkey-sign).\&
.RE
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.IP \(bu 4
.\}
32 byte Ed25519 public key.\&

.RE
.P
.SH EXIT STATUS
.P
The exit code is 0 on success and >0 if an error occurs.\&
.P
It may fail because of one of the following reasons:
.P
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.IP \(bu 4
.\}
Connection with or uploading of the app to the TKey failed.\&
.RE
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.IP \(bu 4
.\}
Some necessary files do not exist.\&
.RE
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.IP \(bu 4
.\}
File parse error.\&
.RE
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.IP \(bu 4
.\}
Public key of device app doesn'\&t match public key file.\&
.RE
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.IP \(bu 4
.\}
The computed message file signature does not match the signature file.\&

.RE
.P
.SH CONFIGURATION
.P
You must have read and write access to the USB serial port TKey
provides.\& On platforms like macOS and Windows this happens
automatically when you approve the TKey device.\& Under Linux one way to
get access as your ordinary user is by installing a udev rule like
this:
.P
.nf
.RS 4
# Mark Tillitis TKey as a security token\&. /usr/lib/udev/rules\&.d/70-uaccess\&.rules
# will add TAG "uaccess", which will result in file ACLs so that local user
# (see loginctl) can read/write to the serial port in /dev\&.
ATTRS{idVendor}=="1207", ATTRS{idProduct}=="8887",
ENV{ID_SECURITY_TOKEN}="1"
.fi
.RE
.P
Put this in \fB/etc/udev/rules.\&d/60-tkey.\&rules\fR and run \fBudevadm control --reload\fR
which should make the TKey device (typically \fB/dev/ttyACM0\fR)
availabe to anyone logged in on the console (see \fBloginctl\fR).\&
.P
Another way to get access is by becoming a member of the group that
owns serial ports on some systems with default udev rules for USB CDC
ACM devices that come and go.\& On Ubuntu that group is \fBdialout\fR.\& You
can do it like this:
.P
.nf
.RS 4
$ id -un
exampleuser
$ ls -l /dev/ttyACM0
crw-rw---- 1 root dialout 166, 0 Sep 16 08:20 /dev/ttyACM0
$ sudo usermod -a -G dialout exampleuser
.fi
.RE
.P
For the change to take effect, you need to either log out and login
again or run the command \fBnewgrp dialout\fR in the terminal that you are
working in.\&
.P
.SH EXAMPLES
.P
All examples either load the device app automatically or works with an
already loaded device app.\&
.P
Store the public key in a file.\& When loading the device app modify the
measured identity with a User Supplied Secret.\& The public key file `key.\&pub`
already exists so `tkey-sign` asks if it should replace it.\&
.P
.nf
.RS 4
$ tkey-sign -G -p key\&.pub --uss
Enter phrase for the USS:
Repeat the phrase:
File key\&.pub exists\&. Overwrite [y/n]?
y
$
.fi
.RE
.P
Sign a file.\& The program warns that the \fBsigner\fR device app is already
loaded, probably from the above command.\&
.P
.nf
.RS 4
\&./tkey-sign -S -m message -p key\&.pub
WARNING: App already loaded\&.
$
.fi
.RE
.P
Verify a signature over a message file with the signature in the
default "message.\&sig" file:
.P
.nf
.RS 4
$ tkey-sign -V -m message -p key\&.pub
Signature verified
$
.fi
.RE
.P
.SH SEE ALSO
.P
https://tillitis.\&se/
